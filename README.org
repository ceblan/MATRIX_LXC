:PROPERTIES:
:ID:       18d09336-9ce3-4f81-8dac-6251fa29abc0
:GPTEL_MODEL: gpt-4o-mini
:GPTEL_BACKEND: ChatGPT
:GPTEL_SYSTEM: You are a large language model living in Emacs and a helpful assistant. Respond concisely.
:GPTEL_BOUNDS: ((633 . 973) (989 . 1106) (1121 . 1214) (1229 . 1230) (1332 . 1388) (1403 . 1414) (1468 . 1495) (1510 . 1774) (1789 . 1845) (1933 . 2169) (2562 . 2564) (2644 . 2746) (2761 . 2762) (2767 . 2775) (2776 . 2952) (3093 . 3226) (6959 . 6985) (6990 . 6991) (6992 . 6993) (6996 . 7049) (7054 . 7055) (7059 . 7111) (7116 . 7117) (7121 . 7144) (7180 . 7200) (7214 . 7215) (7229 . 7233))
:LXC_NAME: POLLAS++
:OUT_DIR: ansible/tasks/
:END:

#+OPTIONS: toc:nil
#+TOC: headlines
#+title: LXC Containers
#+filetags: :LXC:

* RSS LXC Containers

This note contains some recipes for creating and configuring LXC containers.

** TL;DR

Todo esto está disponible para consultar y clonar en [[https://github.com/ceblan/Howto-LXC][github/ceblan/howto_LXC]] 

1. MATRIX.

** MATRIX setup

We split the MATRIX set up in three stages, each one with its own ansible
playbook:

1. [[id:214611e0-4085-451e-bfb1-fba2f6a2152e][MATRIX lxc playbook]]
2. [[id:6a9266c3-768a-4d72-8248-38aaae095445][MATRIX packages installation]]

*** MATRIX LXC initial setup

Below re the tasks as well as some tips about how to provision a MATRIX using
LXC

**** How to create a LXC debian bookworm container in debian:

To create an LXC Debian Bookworm container in Debian, follow these steps:

1. *Install LXC* (if not already installed):
   #+begin_src shell :tangle no 
   sudo apt update
   sudo apt install lxc
   #+end_src

2. *Create a directory for your container*:
   #+begin_src shell :tangle no
   sudo mkdir -p /var/lib/lxc/MATRIX
   #+end_src

3. *Create the container*:
   #+begin_src shell :tangle no
     sudo lxc-create --name MATRIX --template download -- --dist debian --release bookworm --arch amd64
   #+end_src

4. *Start the container*:
   #+begin_src shell :tangle no
   sudo lxc-start -n MATRIX
   #+end_src

5. *Access the container’s shell*:
   #+begin_src shell :tangle no
   sudo lxc-attach -n MATRIX
   #+end_src

You now have a running Debian Bookworm container!

**** How to delete or remove a LXC container:

To delete or remove an LXC container, follow these steps:

1. *Stop the container* (if it is running):
   #+begin_src shell :tangle no
   sudo lxc-stop -n MATRIX
   #+end_src

2. *Delete the container*:
   #+begin_src shell :tangle no
   sudo lxc-destroy -n MATRIX
   #+end_src

After these commands, the =MATRIX= LXC container will be removed from your
system.

**** How to make the container to get same ip address every start:

To assign a static IP address to your LXC container, you can follow these steps:

1. Stop MATRIX container
2. Uncomment the line "LXC_DHCP_CONFILE=/etc/dnsmasq.conf"
3. as root in the server machine do
   #+begin_src shell :tangle no
     echo "dhcp-host=mycontainer,10.0.3.10" >>/etc/lxc/dnsmasq.conf
     ln -s /etc/lxc/dnsmasq.conf /etc/dnsmasq.conf
   #+end_src
4. restart lxc-net.service
   #+begin_src shell :tangle no
    systemctl status lxc-net.service 
   #+end_src
 
**** How to list all available containers and its status:

To list all available LXC containers along with their status, use the following
command:

#+begin_src shell :tangle no
sudo lxc-ls -f
#+end_src

This command will display a table with details about each container, including
its name, state (running, stopped), and other relevant information like IP
addresses.


**** How to tar a container to share it to other machine

1. Stop the container

   #+begin_src shell :tangle no
   sudo lxc-stop -n MATRIX
   #+end_src

2. Tar the container directory
   
   #+begin_src shell :tangle no
     cd /var/lib/lxc
     tar --numeric-owner -cvjf MATRIX_fs.tar.bz2 MATRIX
   #+end_src


**** How to untar shared container 

1. Tar the container directory
   
   #+begin_src shell :tangle no
     cd /var/lib/lxc
     tar --numeric-owner -xvjf MATRIX_fs.tar.bz2
   #+end_src

**** How to copy/clone a container

1. Stop the container

   #+begin_src shell :tangle no
   sudo lxc-stop -n MATRIX
   #+end_src

2. copy container MATRIX a MATRIX-copy
   
   #+begin_src shell :tangle no
     sudo lxc-copy -n MATRIX -N MATRIX-copy
   #+end_src


**** *Ansible* playbook that performs all previous task on host your host.
:PROPERTIES:
:ID:       214611e0-4085-451e-bfb1-fba2f6a2152e
:END:

Below there is an Ansible playbook that sets up the MATRIX container (lxc) on the
host *tsc-host-1*, performing all the tasks you've outlined:

#+begin_src yaml :tangle ansible/tasks/create-lxc-MATRIX.yml

---
- name: Set up LXC container for a MATRIX
  hosts: urganda # here should have the host where the container is to be deployed
  become: yes
  vars_files:
    - vars.yml
  #vars:
  #  DEST: MATRIX  # remove this line if "--extra-vars "DEST=MATRIX" is passed when calling ansible-playbook

  tasks:
    - name: Install LXC
      apt:
        name: lxc
        state: present
        update_cache: yes

    # - name: Uncomment LXC_DHCP_CONFILE in dnsmasq.conf
    #   lineinfile:
    #     path: /etc/default/lxc-net
    #     regexp: '^#LXC_DHCP_CONFILE'
    #     line: 'LXC_DHCP_CONFILE=/etc/dnsmasq.conf'

    - name: Ensure the directory for SSH keys exists
      file:
        path: "{{ playbook_dir }}/files/ssh-keys/{{ DEST }}"
        state: directory

    - name: Check if keys exist
      shell: "find {{ playbook_dir }}/files/ssh-keys/{{ DEST }} -name '*key*' | wc -l"
      register: ssh_keys_exists
      changed_when: false

    - debug:
        msg: "Number of keys found: {{ ssh_keys_exists.stdout }}"

    - name: Generate SSH host keys
      command: ssh-keygen -t {{ item }} -N "" -f {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/ssh_host_{{ item }}_key
      with_items:
        - rsa
        - ecdsa
        - ed25519
      when: ssh_keys_exists.stdout | trim | int != 6

    - name: Change {{ playbook_dir }}/files/ssh-keys/{{ DEST }} owner to {{ ansible_env.USER }}
      shell: "chown {{ ansible_env.USER }}:{{ ansible_env.USER }} {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/*"
      register: ssh_key_files


    - name: Change keys permissions before copy
      shell: "chmod 644 {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/*"
      register: ssh_key_files

    - name: Ensure the directory for SSH shared keys exists
      file:
        path: "{{ playbook_dir }}/files/ssh-keys/shared"
        state: directory

    - name: Check if shared keys exist
      shell: "find {{ playbook_dir }}/files/ssh-keys/shared/ -name 'id_rsa_lxc*' | wc -l"
      register: ssh_shared_keys_exists
      changed_when: false

    - debug:
        msg: "Number of shared keys found: {{ ssh_shared_keys_exists.stdout }}"

    - name: Generate SSH shared keys
      command: ssh-keygen -t rsa -N "" -f {{ playbook_dir }}/files/ssh-keys/shared/id_rsa_lxc
      when: ssh_shared_keys_exists.stdout | trim | int != 2

    - name: Change keys permissions before copy
      shell: "chmod 644 {{ playbook_dir }}/files/ssh-keys/shared/*"
      register: ssh_key_files

    - name: Check if {{ DEST }} container exists
      command: lxc-ls -f | grep {{ DEST }}
      register: tsc_exists
      ignore_errors: no

    - name: Variable tsc_exists
      debug:
        msg: "{{ tsc_exists }}"

    - name: Check if {{ DEST }} container is running
      command: lxc-ls -f --running | grep {{ DEST }}
      register: container_status
      ignore_errors: no
      when: tsc_exists.stdout_lines | select("search", DEST)

    - name: Output value of container_status
      debug:
        msg: "{{ container_status }}"

    - name: Stop {{ DEST }} container if it is running
      command: lxc-stop -n {{ DEST }}
      ignore_errors: yes
      when: container_status.stdout_lines | select("search", DEST ~"   RUNNING")

    - name: Pause for 5 seconds
      wait_for:
        delay: 1
        timeout: 5

    - name: Destroy {{ DEST }} container if it exists
      command: lxc-destroy -n {{ DEST }}
      when: DEST in tsc_exists.stdout

    - name: Create directory for {{ DEST }} container
      file:
        path: /var/lib/lxc/{{ DEST }}
        state: directory

    - name: Check if {{ DEST }} container exists
      command: lxc-ls --fancy
      register: lxc_list

    - name: Create LXC container {{ DEST }} if it does not exist
      command: lxc-create --name {{ DEST }} --template download -- --dist debian --release bookworm --arch amd64
      when: "DEST not in lxc_list.stdout"

    - name: Get IP for {{ DEST }} from inventory
      shell: "grep {{ DEST }}.*ansible_hosts {{ hostvars[inventory_hostname]['ansible_inventory_sources'][0] }} | awk -F'=' '{print $2}'"
      register: tsc_ip_output

    - name: Print the IP of {{ DEST }}
      debug:
        msg: "IP of {{ DEST }}: {{ tsc_ip_output.stdout }}"

    - name: Remove static DHCP entries for {{ tsc_ip_output.stdout }} in dnsmasq.conf
      lineinfile:
        path: /etc/lxc/dnsmasq.conf
        state: absent
        regexp: '^dhcp-host=.*{{ tsc_ip_output.stdout }}.*'

    - name: Set static DHCP for {{ DEST }} in dnsmasq.conf
      lineinfile:
        path: /etc/lxc/dnsmasq.conf
        line: "dhcp-host={{ DEST }},{{ tsc_ip_output.stdout }}"

    - name: Create symlink for dnsmasq.conf
      file:
        src: /etc/lxc/dnsmasq.conf
        dest: /etc/dnsmasq.d/lxc.conf
        state: link

    - name: Remove lines containing {{ DEST }} from dnsmasq leases file
      command: sed -i '/{{ DEST }}/d' /var/lib/misc/dnsmasq.lxcbr0.leases

    - name: Restart lxc-net service
      systemd:
        name: lxc-net
        state: restarted

    - name: Start LXC container {{ DEST }}
      command: lxc-start -n {{ DEST }}
      when: "DEST not in lxc_list.stdout"

    - name: Check if {{ DEST }} container is running
      command: lxc-info -n {{ DEST }} -s
      register: container_status
      ignore_errors: true

    - name: Install OpenSSH server in {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- apt-get install -y openssh-server
      when: container_status.rc == 0

    - name: Install Python3 in {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- apt-get install -y python3 python-apt-common
      when: container_status.rc == 0

    # - name: Copy SSH host keys to {{ DEST }}
    #   command: lxc-file push {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/* {{ DEST }}/etc/ssh/
    #   when: container_status.rc == 0

    - name: Get list of SSH host keys
      shell: "find {{ playbook_dir }}/files/ssh-keys/{{ DEST }} -name '*key*'"
      register: ssh_key_files

    - name: Copy SSH host keys to /var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/
      copy:
        src: "{{ item }}"
        dest: "/var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/"
        owner: root
        group: root
        mode: '0600'
      with_items: "{{ ssh_key_files.stdout_lines }}"

    - name: Change keys permissions after copy
      shell: "chmod 600 {{ playbook_dir }}/files/ssh-keys/shared/*"
      register: ssh_key_files

    - name: Change keys permissions after copy
      shell: "chmod 644 {{ playbook_dir }}/files/ssh-keys/shared/*pub"
      register: ssh_key_files

    - name: Change public keys permissions after copy
      shell: "chmod 644 /var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/*pub"

    - name: Restart SSH service in {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- /etc/init.d/ssh restart

    - name: Set root password for {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- sh -c "echo 'root:finiquito' | chpasswd"

    - name: Create user {{ lxc_username }}
      command: lxc-attach -n {{ DEST }} -- adduser --disabled-password --gecos "" --uid 1015 {{ lxc_username }}

    - name: Create group inside container (GID 300)
      command: lxc-attach -n {{ DEST }} -- bash -c "groupadd -g 300 devpl"

    - name: Create user {{ lxc_username }} with password
      command: lxc-attach -n {{ DEST }} -- sh -c "echo '{{ lxc_username }}:{{ lxc_username }}' | chpasswd"

    - name: Add user {{ lxc_username }} to the devpl group
      command: lxc-attach -n {{ DEST }} -- usermod -aG devpl {{ lxc_username }}

    - name: create git-carlos
      command: lxc-attach -n {{ DEST }} -- mkdir -p /home/{{ lxc_username }}/git-carlos/git-hub

    - name: create data
      command: lxc-attach -n {{ DEST }} -- mkdir -p /home/{{ lxc_username }}/data

    - name: chown git-carlos
      command: lxc-attach -n {{ DEST }} -- chown -R {{ lxc_username }}:{{ lxc_username }} /home/{{ lxc_username }}/git-carlos

    - name: Add user {{ lxc_username }} to the sudo group
      command: lxc-attach -n {{ DEST }} -- usermod -aG sudo {{ lxc_username }}

    - name: Allow members of the sudo group to run sudo without a password
      become: yes
      become_method: sudo
      lineinfile:
        path:  "/var/lib/lxc/{{ DEST }}/rootfs/etc/sudoers"
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL:ALL) NOPASSWD: ALL'

    - name: Restart sudo
      command: lxc-attach -n {{ DEST }} -- /etc/init.d/sudo restart

    - name: Create dir /home/{{ lxc_username }}/.ssh
      command: lxc-attach -n {{ DEST }} -- sh -c "mkdir -p /home/{{ lxc_username }}/.ssh; chown -R {{ lxc_username }}:{{ lxc_username }} /home/{{ lxc_username }}/.ssh"

    - name: Get list of SSH shared keys
      shell: "find {{ playbook_dir }}/files/ssh-keys/shared -name 'id_rsa_lxc*'"
      register: ssh_shared_keys_files

    - name: Copy SSH shared keys to /var/lib/lxc/{{ DEST }}/rootfs/home/{{ lxc_username }}/.ssh/
      copy:
        src: "{{ item }}"
        dest: "/var/lib/lxc/{{ DEST }}/rootfs/home/{{ lxc_username }}/.ssh/"
        owner: root
        group: root
        mode: '0600'
      with_items: "{{ ssh_shared_keys_files.stdout_lines }}"

    - name: Change public keys permissions after copy
      shell: "chmod 644 /var/lib/lxc/{{ DEST }}/rootfs/home/{{ lxc_username }}/.ssh/*pub"

    - name: Generate authorized_keys
      command: lxc-attach -n {{ DEST }} -- sh -c "cat /home/{{ lxc_username }}/.ssh/id_rsa_lxc.pub > /home/{{ lxc_username }}/.ssh/authorized_keys; chmod 600  /home/{{ lxc_username }}/.ssh/authorized_keys"

    - name: Create dir /home/concesion/.ssh
      command: lxc-attach -n {{ DEST }} -- sh -c "chown -R {{ lxc_username }}:{{ lxc_username }} /home/{{ lxc_username }}/.ssh"

    - name: Install packages (batch 1)
      command: lxc-attach -n {{ DEST }} -- sh -c "apt-get install -y {{ item }}"
      loop:
        - wget
        - curl

    - name: Remove sources.list file from {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- rm -f /etc/apt/sources.list

    - name: Set sources lists
      command: lxc-attach -n {{ DEST }} -- sh -c "echo {{ item }} >> /etc/apt/sources.list"
      loop:
        - "# generated by ansible"
        - "deb http://deb.debian.org/debian/ bookworm main contrib non-free-firmware"
        - "deb-src http://deb.debian.org/debian/ bookworm main contrib non-free-firmware"
        - "deb http://security.debian.org/debian-security bookworm-security main contrib non-free-firmware"
        - "deb-src http://security.debian.org/debian-security bookworm-security main contrib non-free-firmware"
        - "deb http://deb.debian.org/debian/ bookworm-updates main contrib non-free-firmware"
        - "deb-src http://deb.debian.org/debian/ bookworm-updates main contrib non-free-firmware"

    # - name: Get keys for web.deb-multimedia.org
    #   command: lxc-attach -n {{ DEST }} -- sh -c "wget http://www.deb-multimedia.org/pool/main/d/deb-multimedia-keyring/deb-multimedia-keyring_2016.8.1_all.deb; dpkg -i deb-multimedia-keyring_2016.8.1_all.deb"

    - name: Update sources
      command: lxc-attach -n {{ DEST }} -- sh -c "apt-get update"

    # - name: Add mount entry to git-carlos
    #   lineinfile:
    #     path: /var/lib/lxc/{{ DEST }}/config
    #     line: "lxc.mount.entry = /home/sice/git-sice home/{{ lxc_username }}/git-carlos none bind 0 0"
    #     create: yes # Create the file if it doesn't exist
    #     state: present # Ensure the line is present

    - name: Let data be mounted in the LXC container
      lineinfile:
        path: "/var/lib/lxc/{{ DEST }}/config"
        line: "lxc.mount.entry = /home/{{ lxc_username }}/data/MATRIX_LXC home/{{ lxc_username }}/data none bind 0 0"
        create: yes
        state: present


    - name: Add mount entry to git-hub
      lineinfile:
        path: /var/lib/lxc/{{ DEST }}/config
        line: "lxc.mount.entry = /home/carlos/git-carlos/git-hub home/{{ lxc_username }}/git-carlos/git-hub none bind 0 0"
        create: yes # Create the file if it doesn't exist
        state: present # Ensure the line is present

    - name: Stop {{ DEST }} container if it is running
      command: lxc-stop -n {{ DEST }}
      ignore_errors: yes

    - name: Pause for 5 seconds
      wait_for:
        delay: 1
        timeout: 5

    - name: Remove lines containing {{ DEST }} from dnsmasq leases file
      command: sed -i '/{{ DEST }}/d' /var/lib/misc/dnsmasq.lxcbr0.leases

    - name: Restart lxc-net service
      systemd:
        name: lxc-net
        state: restarted

    - name: Pause for 10 seconds
      wait_for:
        delay: 1
        timeout: 3

    - name: Start LXC container {{ DEST }}
      command: lxc-start {{ DEST }}

    - name: Pause for 5 seconds
      wait_for:
        delay: 1
        timeout: 5


    - name: List all LXC containers
      command: lxc-ls -f
      register: lxc_list_final

    - name: Display all LXC containers
      debug:
        var: lxc_list_final.stdout_lines
#+end_src


***** Notes:

1. Clonar el repositorio con la configuración de ansible
    #+begin_src sh :tangle no
      # this file is ansible.cfg in the root of the project
      git clone https://github.com/ceblan/Howto-LXC.git
      cd Howto-LXC
   #+end_src
  
2. =Ensure you have =ansible= installed and configured on your control
   machine. It's recommended to have ssh keys to access the hosts and guests.
   
   #+begin_src conf :tangle no
     # this file is ansible.cfg in the root of the project
     [defaults]
     inventory = hosts
     private_key_file = ~/.ssh/id_rsa_lxc # create thix key for the project
     remote_user = concesion
   #+end_src

3. Ensure you create a directory /ssh-keys/ with with the host-keys and the
   shared-keys to avoid ssh problems when container is regenerated
    #+begin_src sh :tangle no
      # this file is ansible.cfg in the root of the project
      sudo mkdir -p ssh-keys/MATRIX
      sudo cp /etc/ssh/ssh_host* ssh-keys/MATRIX
      sudo mkdir -p ssh-keys/shared
      ssh-keygen -t rsa -b 2048 -f ./ssh-keys/shared/id_rsa_lxc
   #+end_src
 
  4. =Adjust your inventory file to include your host instead of localhost=

   #+begin_src conf :tangle no
     # this file is inventory.ini in the root of the project
     [lxc_hosts]
     localhost ansible_host=127.0.0.1
     tpcc-host-1 ansible_host=172.30.2.3
     [lxc_guests]
     MATRIX ansible_hosts=10.0.3.40
     MATRIX ansible_user=concesion
     MATRIX ansible_hosts=10.0.3.11
     MATRIX ansible_user=concesion
     MATRIX-2 ansible_hosts=10.0.3.12
     MATRIX-2 ansible_user=concesion
     #+end_src
  
5. Run the playbook with:
   #+begin_src shell :tangle no
     cd ansible
     ansible-playbook -i inventory.ini tasks/create-lxc-MATRIX.yml --extra-vars "DEST=MATRIX"
   #+end_src
 
*** MATRIX packages installation.

**** Various packages
:PROPERTIES:
:ID:       6a9266c3-768a-4d72-8248-38aaae095445
:END:

Instalation of Package requirements

#+begin_src yaml :tangle ansible/tasks/install-packages-MATRIX.yml
---
- name: Set up TRAEFIK packages
  hosts: MATRIX # here should be tsc-host-1 instead
  become_method: sudo
  become: true
  vars_files:
    - vars.yml

  #vars_prompt:
    #- name: "ansible_become_pass"
      #prompt: "Enter your sudo password in remote server"
      #private: yes


  tasks:
    # - name: apt update
    #   become: yes
    #   command: apt update

    - name: avoid tshark config to block installation #esto es para que no pregunte lo del setuid y se bloquee
      become: yes
      shell: echo "wireshark-common wireshark-common/install-setuid boolean true" | sudo debconf-set-selections

    - name: Set APT to not install recommended packages
      copy:
        dest: /etc/apt/apt.conf.d/01norecommend
        content: |
          APT::Install-Recommends "0";
          APT::Install-Suggests "0";

    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Install required packages
      become: yes
      become_method: sudo
      apt:
        name:
          - vim
          - gawk
        state: present
        install_recommends: no

    - name: Actualizar el índice de paquetes apt
      apt:
        update_cache: yes
        cache_valid_time: 3600  # 1 hora

    - name: Instalar dependencias para usar repositorios HTTPS and gpg
      apt:
        name: apt-transport-https, ca-certificates, curl, software-properties-common, gpg
        state: present

    - name: Añadir repositorio de Docker para Debian
      become: yes
      command: cp data/lxc-helper-file/docker.list /etc/apt/sources.list.d//

    - name: Ejecutar script de fuentes docker
      become: true
      command: /home/{{lxc_username}}/data/lxc-helper-file/docker-apt-sources.sh

    - name: Actualizar el índice de paquetes apt
      apt:
        update_cache: yes
        cache_valid_time: 3600  # 1 hora

    - name: Instalar Docker CE
      apt:
        name: docker-ce, docker-ce-cli, containerd.io, docker-buildx-plugin, docker-compose-plugin
        state: present

    - name: Asegurarse de que el servicio de Docker está iniciado y habilitado
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Añadir usuario actual al grupo docker (para no necesitar sudo para comandos docker)
      user:
        name: "{{ lxc_username }}" # Usuario que ejecuta Ansible
        groups: docker
        append: yes
      become: true # Necesario para modificar grupos de usuario
      become_user: root #  Ejecutar como root para modificar grupos, incluso si ansible corre como otro usuario

    - name: Re-login del usuario (para que los cambios de grupo surtan efecto)
      meta: reset_connection # Fuerza a Ansible a reconectar para reflejar los cambios de grupo
#+end_src

***** Notes:

  
1. Run the playbook with:
   #+begin_src shell :tangle no
     cd ansible 
     ansible-playbook -i inventory.ini tasks/install-packages-MATRIX.yml -l MATRIX
   #+end_src
